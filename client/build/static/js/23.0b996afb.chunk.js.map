{"version":3,"sources":["components/myAccount/ChangePAssword.js"],"names":["ChangePAssword","navigate","useNavigate","uid","useSelector","state","useState","rerender","setrerender","currentpass","newpass","cnewpass","errorState","seterrorState","currentpassRef","useRef","newpassRef","cnewpassRef","handler","e","target","name","value","errors","length","current","className","style","width","display","color","onChange","type","ref","placeholder","onClick","valid","Object","values","forEach","val","validate","cpdata","email","changePassword","then","res","data","success"],"mappings":"gNAIe,SAASA,IACpB,IAAIC,EAAWC,cACTC,EAAMC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,OACvC,EAAgCG,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCF,mBAAS,CAAEG,YAAa,GAAIC,QAAS,GAAIC,SAAU,KAAvF,mBAAOC,EAAP,KAAmBC,EAAnB,KACMC,EAAiBC,iBAAO,MACxBC,EAAaD,iBAAO,MACpBE,EAAcF,iBAAO,MACrBG,EAAU,SAACC,GACb,MAAwBA,EAAEC,OAAlBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACVC,EAASX,EACb,OAAQS,GACJ,IAAK,cACDE,EAAOd,YAAca,EAAME,OAAS,EAAI,+CAAiD,GACzF,MACJ,IAAK,UACDD,EAAOb,QAAUY,EAAME,OAAS,EAAI,+CAAiD,GACrF,MACJ,IAAK,WACDD,EAAOZ,SAAWW,GAASN,EAAWS,QAAQH,MAAQ,iCAAmC,GAKjGT,EAAcU,GACdf,GAAaD,IAiBjB,OACI,sBAAKmB,UAAU,eAAf,UACI,iDAAwB,uBACxB,sBAAKC,MAAO,CAAEC,MAAO,MAAOC,QAAS,UAArC,UACI,mBAAGF,MAAO,CAAEG,MAAO,OAAnB,SAA6BlB,EAAWH,cACxC,sBAAKiB,UAAU,gBAAf,UACI,uBAAOA,UAAU,WAAWK,SAAUb,EAASc,KAAK,WAAWX,KAAK,cAAcY,IAAKnB,EAAgBoB,YAAY,qBACnH,sBAAMR,UAAU,yBAGxB,sBAAKC,MAAO,CAAEC,MAAO,MAAOC,QAAS,UAArC,UACI,mBAAGF,MAAO,CAAEG,MAAO,OAAnB,SAA6BlB,EAAWF,UACxC,sBAAKgB,UAAU,gBAAf,UACI,uBAAOA,UAAU,WAAWK,SAAUb,EAASc,KAAK,WAAWX,KAAK,UAAUY,IAAKjB,EAAYkB,YAAY,iBAC3G,sBAAMR,UAAU,yBAGxB,sBAAKC,MAAO,CAAEC,MAAO,MAAOC,QAAS,UAArC,UACI,mBAAGF,MAAO,CAAEG,MAAO,OAAnB,SAA6BlB,EAAWD,WACxC,sBAAKe,UAAU,gBAAf,UACI,uBAAOA,UAAU,WAAWK,SAAUb,EAASc,KAAK,WAAWX,KAAK,WAAWY,IAAKhB,EAAaiB,YAAY,yBAC7G,sBAAMR,UAAU,yBAGxB,wBAAQC,MAAO,CAAEC,MAAO,SAAWO,QAlCd,WACzB,GANa,SAACZ,GACd,IAAIa,GAAQ,EAEZ,OADAC,OAAOC,OAAOf,GAAQgB,SAAQ,SAACC,GAAD,OAASA,EAAIhB,OAAS,IAAMY,GAAQ,MAC3DA,EAGHK,CAAS7B,GAAa,CACtB,IAAM8B,EAAS,CAAEC,MAAOxC,EAAIwC,MAAOlC,YAAaK,EAAeW,QAAQH,MAAOZ,QAASM,EAAWS,QAAQH,OAC1GsB,YAAeF,GAAQG,MAAK,SAAAC,GACrBA,EAAIC,KAAKC,SACR/C,EAAS,UA6BiDyB,UAAU,kBAA5E","file":"static/js/23.0b996afb.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { changePassword } from '../../config/Myservices';\r\nimport {useNavigate} from 'react-router-dom'\r\nexport default function ChangePAssword() {\r\n    let navigate = useNavigate()\r\n    const uid = useSelector(state => state.uid)\r\n    const [rerender, setrerender] = useState(false)\r\n    const [errorState, seterrorState] = useState({ currentpass: \"\", newpass: \"\", cnewpass: '' });\r\n    const currentpassRef = useRef(null)\r\n    const newpassRef = useRef(null)\r\n    const cnewpassRef = useRef(null)\r\n    const handler = (e) => {\r\n        const { name, value } = e.target;\r\n        let errors = errorState;\r\n        switch (name) {\r\n            case 'currentpass':\r\n                errors.currentpass = value.length < 8 ? 'Password should be atleast 8 characters long' : '';\r\n                break;\r\n            case 'newpass':\r\n                errors.newpass = value.length < 8 ? 'Password should be atleast 8 characters long' : '';\r\n                break;\r\n            case 'cnewpass':\r\n                errors.cnewpass = value != newpassRef.current.value ? 'confirm password do not match!' : '';\r\n                break;\r\n            default:\r\n                break; \r\n        }\r\n        seterrorState(errors);\r\n        setrerender(!rerender)\r\n    } \r\n    const validate = (errors) => {\r\n        let valid = true;\r\n        Object.values(errors).forEach((val) => val.length > 0 && (valid = false));\r\n        return valid;\r\n    }\r\n    const change_password_func = () => {\r\n        if (validate(errorState)) {\r\n            const cpdata = { email: uid.email, currentpass: currentpassRef.current.value, newpass: newpassRef.current.value }\r\n            changePassword(cpdata).then(res=>{\r\n                if(res.data.success){\r\n                    navigate('/')\r\n                }\r\n            })\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"text-center \">\r\n            <h3>Change Password</h3><hr />\r\n            <div style={{ width: \"50%\", display: \"inline\" }}>\r\n                <p style={{ color: \"red\" }}>{errorState.currentpass}</p>\r\n                <div className=\"wrap-input100\">\r\n                    <input className=\"input100\" onChange={handler} type=\"password\" name=\"currentpass\" ref={currentpassRef} placeholder=\"Current Password\" />\r\n                    <span className=\"focus-input100\"></span>\r\n                </div>\r\n            </div>\r\n            <div style={{ width: \"50%\", display: \"inline\" }}>\r\n                <p style={{ color: \"red\" }}>{errorState.newpass}</p>\r\n                <div className=\"wrap-input100\">\r\n                    <input className=\"input100\" onChange={handler} type=\"password\" name=\"newpass\" ref={newpassRef} placeholder=\"New Password\" />\r\n                    <span className=\"focus-input100\"></span>\r\n                </div>\r\n            </div>\r\n            <div style={{ width: \"50%\", display: \"inline\" }}>\r\n                <p style={{ color: \"red\" }}>{errorState.cnewpass}</p>\r\n                <div className=\"wrap-input100\">\r\n                    <input className=\"input100\" onChange={handler} type=\"password\" name=\"cnewpass\" ref={cnewpassRef} placeholder=\"Confirm New Password\" />\r\n                    <span className=\"focus-input100\"></span>\r\n                </div>\r\n            </div>\r\n            <button style={{ width: \"200px\" }} onClick={change_password_func} className=\"btn btn-primary\">Submit</button>\r\n        </div>\r\n    )\r\n}\r\n"],"sourceRoot":""}