{"version":3,"sources":["components/myAccount/Address.js"],"names":["Address","address","useSelector","state","uid","useState","rerender","setrerender","addressRef","useRef","city","pincode","country","errorState","seterrorState","pincodeRef","cityRef","stateRef","countryRef","handler","e","target","name","value","errors","length","validate","valid","Object","values","forEach","val","className","style","color","onChange","type","ref","placeholder","onClick","undefined","email","arr","data","current","push","setAddress","user_id","_id","token","localStorage","getItem","addressArr","JSON","stringify","alert","padding","marginTop","border","width","map","elem","index","id","temp_arr","splice","then","res","success","deleteAddressFunc"],"mappings":"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","file":"static/js/22.85c996d4.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { setAddress } from '../../config/Myservices';\r\nexport default function Address() {\r\n    const address = useSelector(state => state.address)\r\n    const uid = useSelector(state => state.uid)\r\n    const [rerender, setrerender] = useState(false)\r\n    const addressRef = useRef(null)\r\n    const [errorState, seterrorState] = useState({ address: \"\", city: \"\", pincode: \"\", state: \"\", country: \"\" });\r\n    const pincodeRef = useRef(null)\r\n    const cityRef = useRef(null)\r\n    const stateRef = useRef(null)\r\n    const countryRef = useRef(null)\r\n    const submitAddressFunc = () => {\r\n        if (validate(errorState)) {\r\n            if (uid.email != undefined) {\r\n                let arr = address;\r\n                const data = { address: addressRef.current.value, pincode: pincodeRef.current.value, city: cityRef.current.value, state: stateRef.current.value, country: countryRef.current.value }\r\n                arr.push(data)\r\n                setAddress({ user_id: uid._id, token:localStorage.getItem(\"token\") ,addressArr: JSON.stringify(arr) })\r\n                setrerender(!rerender)\r\n            }\r\n        }\r\n    }\r\n    const cancelAddressFunc = () => {\r\n        alert(\"cancelled\")\r\n    }\r\n    const handler = (e) => {\r\n        const { name, value } = e.target;\r\n        let errors = errorState;\r\n        switch (name) {\r\n            case 'address':\r\n                errors.address = value.length < 10 ? 'Enter detailed Address' : '';\r\n                break;\r\n            case 'pincode':\r\n                errors.pincode = value.length != 6 ? 'Invalid Pincode' : '';\r\n                break;\r\n            case 'city':\r\n                errors.city = value.length < 3 ? 'Invalid field' : '';\r\n                break;\r\n            case 'state':\r\n                errors.state = value.length < 3 ? 'Invalid field' : '';\r\n                break;\r\n            case 'country':\r\n                errors.country = value.length < 3 ? 'Invalid field' : '';\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        seterrorState(errors);\r\n        setrerender(!rerender)\r\n    }\r\n    const validate = (errors) => {\r\n        let valid = true;\r\n        Object.values(errors).forEach((val) => val.length > 0 && (valid = false));\r\n        return valid;\r\n    }\r\n    const deleteAddressFunc=(id)=>{\r\n        let temp_arr = address;\r\n        temp_arr.splice(id,1)\r\n        setAddress({ email: uid.email, addressArr: JSON.stringify(temp_arr) }).then(res => {\r\n            if (res.data.success) {\r\n                alert(\"done\")\r\n            }\r\n        })\r\n        setrerender(!rerender)\r\n    }\r\n    return (\r\n        <div>\r\n            <h3>Add new address</h3><hr />\r\n            <div className=\"addressForm\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-6\">\r\n                        <p style={{ color: \"red\" }}>{errorState.address}</p>\r\n                        <div className=\"wrap-input100\">\r\n                            <input className=\"input100\" onChange={handler} type=\"text\" name=\"address\" ref={addressRef} placeholder=\"Address\" />\r\n                            <span className=\"focus-input100\"></span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\">\r\n                        <p style={{ color: \"red\" }}>{errorState.pincode}</p>\r\n                        <div className=\"wrap-input100\">\r\n                            <input className=\"input100\" onChange={handler} type=\"text\" name=\"pincode\" ref={pincodeRef} placeholder=\"Pincode\" />\r\n                            <span className=\"focus-input100\"></span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\">\r\n                        <p style={{ color: \"red\" }}>{errorState.city}</p>\r\n                        <div className=\"wrap-input100\">\r\n                            <input className=\"input100\" onChange={handler} type=\"text\" name=\"city\" ref={cityRef} placeholder=\"City\" />\r\n                            <span className=\"focus-input100\"></span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-4\">\r\n                        <p style={{ color: \"red\" }}>{errorState.state}</p>\r\n                        <div className=\"wrap-input100\">\r\n                            <input className=\"input100\" onChange={handler} type=\"text\" name=\"state\" ref={stateRef} placeholder=\"state\" />\r\n                            <span className=\"focus-input100\"></span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\">\r\n                        <p style={{ color: \"red\" }}>{errorState.country}</p>\r\n                        <div className=\"wrap-input100\">\r\n                            <input className=\"input100\" onChange={handler} type=\"text\" name=\"country\" ref={countryRef} placeholder=\"Country\" />\r\n                            <span className=\"focus-input100\"></span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <hr />\r\n            <div className=\"addressFormBtn\">\r\n                <button onClick={submitAddressFunc} className=\"btn btn-outline-dark addressFormBtns\">Save</button>\r\n                <button onClick={cancelAddressFunc} className=\"btn btn-outline-dark addressFormBtns\">Cancel</button>\r\n            </div>\r\n            <div style={{ padding: \"20px\", marginTop: \"20px\", border: \"1px solid #ded9d9\" }} className=\"savedAddressDiv\">\r\n                <h3>Saved address</h3><hr />\r\n                <table className=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th width=\"35%\">Address</th>\r\n                            <th width=\"15%\">Pincode</th>\r\n                            <th width=\"15%\">City</th>\r\n                            <th width=\"15%\">State</th>\r\n                            <th width=\"15%\">Country</th>\r\n                            <th width=\"5%\"></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {address != undefined ?\r\n                            address.map((elem,index) =>\r\n                                <tr>\r\n                                    <td>{elem.address}</td>\r\n                                    <td>{elem.pincode}</td>\r\n                                    <td>{elem.city}</td>\r\n                                    <td>{elem.state}</td>\r\n                                    <td>{elem.country}</td>\r\n                                    <button onClick={()=>deleteAddressFunc(index)}><i className=\"fa fa-trash\"></i></button>\r\n                                </tr>\r\n                            )\r\n                            : ''}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n"],"sourceRoot":""}